import openai
import json
import random
from typing import Dict, List
import streamlit as st
from config import OPENAI_API_KEY, QUESTIONS_PER_QUIZ

class QuizService:
    def __init__(self):
        self.client = None
        self.api_available = False
        
        if OPENAI_API_KEY and OPENAI_API_KEY.strip() and OPENAI_API_KEY != "your_openai_api_key_here":
            try:
                self.client = openai.OpenAI(api_key=OPENAI_API_KEY)
                self.api_available = True
                st.success("ü§ñ OpenAI API Ïó∞Í≤∞ ÏÑ±Í≥µ! AIÍ∞Ä ÎßûÏ∂§Ìòï Î¨∏Ï†úÎ•º ÏÉùÏÑ±Ìï©ÎãàÎã§.")
            except Exception as e:
                st.error(f"‚ùå OpenAI API Ïó∞Í≤∞ Ïã§Ìå®: {str(e)}")
                st.warning("‚ö†Ô∏è API ÌÇ§Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî. API ÌÇ§Í∞Ä ÏóÜÏúºÎ©¥ ÌÄ¥Ï¶àÎ•º ÌîåÎ†àÏù¥Ìï† Ïàò ÏóÜÏäµÎãàÎã§.")
                self.client = None
                self.api_available = False
        else:
            st.error("üí° OpenAI API ÌÇ§Í∞Ä ÌïÑÏöîÌï©ÎãàÎã§!")
            st.info("üîë API ÌÇ§Î•º ÏÑ§Ï†ïÌïòÏßÄ ÏïäÏúºÎ©¥ ÌÄ¥Ï¶àÎ•º ÌîåÎ†àÏù¥Ìï† Ïàò ÏóÜÏäµÎãàÎã§.")
            st.info("üìñ setup_guide.md ÌååÏùºÏùÑ Ï∞∏Í≥†ÌïòÏó¨ OpenAI API ÌÇ§Î•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî.")
            self.api_available = False
    
    def generate_quiz_questions(self, difficulty: str = "Î≥¥ÌÜµ", num_questions: int = QUESTIONS_PER_QUIZ) -> List[Dict]:
        """
        OpenAIÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÌÄ¥Ï¶à Î¨∏Ï†ú ÏÉùÏÑ± (Î∞±ÏóÖ Î¨∏Ï†ú ÏóÜÏùå)
        """
        if not self.client or not self.api_available:
            st.error("‚ùå OpenAI APIÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")
            st.info("üîë API ÌÇ§Î•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî. Î∞±ÏóÖ Î¨∏Ï†úÎäî Ï†úÍ≥µÌïòÏßÄ ÏïäÏäµÎãàÎã§.")
            return []
        
        # API Ìò∏Ï∂ú Ï†Ñ ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏïåÎ¶º
        with st.spinner("ü§ñ AIÍ∞Ä ÏÉàÎ°úÏö¥ Î¨∏Ï†úÎ•º ÏÉùÏÑ± Ï§ëÏûÖÎãàÎã§..."):
            try:
                difficulty_prompts = {
                    "Ïâ¨ÏõÄ": "Ï¥àÎì±ÌïôÏÉùÎèÑ Ïïå Ïàò ÏûàÎäî Îß§Ïö∞ Í∏∞Î≥∏Ï†ÅÏù∏",
                    "Î≥¥ÌÜµ": "Ï§ëÍ≥†Îì±ÌïôÏÉù ÏàòÏ§ÄÏùò ÏùºÎ∞òÏ†ÅÏù∏",
                    "Ïñ¥Î†§ÏõÄ": "ÎåÄÌïôÏÉùÏù¥ÎÇò ÏÑ±Ïù∏Ïù¥ ÏïåÎßåÌïú Í≥†Í∏â"
                }
                
                difficulty_description = difficulty_prompts.get(difficulty, "ÏùºÎ∞òÏ†ÅÏù∏")
                
                prompt = f"""
                {difficulty_description} ÏÉÅÏãù Î¨∏Ï†ú {num_questions}Í∞úÎ•º ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî.
                Í∞Å Î¨∏Ï†úÎäî 4ÏßÄÏÑ†Îã§ ÌòïÏãùÏù¥Ïñ¥Ïïº ÌïòÎ©∞, Îã§Ïùå JSON ÌòïÏãùÏúºÎ°ú Î∞òÌôòÌï¥Ï£ºÏÑ∏Ïöî:

                {{
                    "questions": [
                        {{
                            "question": "Î¨∏Ï†ú ÎÇ¥Ïö©",
                            "options": ["ÏÑ†ÌÉùÏßÄ1", "ÏÑ†ÌÉùÏßÄ2", "ÏÑ†ÌÉùÏßÄ3", "ÏÑ†ÌÉùÏßÄ4"],
                            "correct_answer": 0,
                            "explanation": "Ï†ïÎãµ ÏÑ§Î™Ö"
                        }}
                    ]
                }}

                Ï°∞Í±¥:
                - ÌïúÍµ≠Ïñ¥Î°ú ÏûëÏÑ±
                - correct_answerÎäî Ï†ïÎãµÏùò Ïù∏Îç±Ïä§ (0-3)
                - Îã§ÏñëÌïú Î∂ÑÏïºÏùò ÏÉÅÏãù Î¨∏Ï†ú (Ïó≠ÏÇ¨, Í≥ºÌïô, ÏßÄÎ¶¨, Î¨∏Ìôî, Ïä§Ìè¨Ï∏† Îì±)
                - Î™ÖÌôïÌïòÍ≥† Ï†ïÌôïÌïú Ï†ïÎãµÏù¥ ÏûàÎäî Î¨∏Ï†ú
                - ÏÑ§Î™ÖÏùÄ Í∞ÑÎã®Î™ÖÎ£åÌïòÍ≤å ÏûëÏÑ±
                - Ï†ïÌôïÌûà {num_questions}Í∞úÏùò Î¨∏Ï†úÎ•º ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî
                """
                
                response = self.client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "ÎãπÏã†ÏùÄ ÍµêÏú° Ï†ÑÎ¨∏Í∞ÄÏù¥Î©∞, ÏñëÏßàÏùò ÌÄ¥Ï¶à Î¨∏Ï†úÎ•º ÏÉùÏÑ±ÌïòÎäî Ï†ÑÎ¨∏Í∞ÄÏûÖÎãàÎã§. ÏöîÏ≤≠Îêú Í∞úÏàòÎßåÌÅº Ï†ïÌôïÌûà Î¨∏Ï†úÎ•º ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî."},
                        {"role": "user", "content": prompt}
                    ],
                    temperature=0.7,
                    max_tokens=2500
                )
                
                content = response.choices[0].message.content
                
                # JSON ÌååÏã±
                try:
                    quiz_data = json.loads(content)
                    questions = quiz_data.get("questions", [])
                    if questions and len(questions) >= num_questions:
                        st.success("‚ú® AIÍ∞Ä ÏÉàÎ°úÏö¥ Î¨∏Ï†úÎ•º ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÉùÏÑ±ÌñàÏäµÎãàÎã§!")
                        return questions[:num_questions]
                    else:
                        st.error(f"‚ùå AIÍ∞Ä Ï∂©Î∂ÑÌïú Î¨∏Ï†úÎ•º ÏÉùÏÑ±ÌïòÏßÄ Î™ªÌñàÏäµÎãàÎã§. (ÏöîÏ≤≠: {num_questions}Í∞ú, ÏÉùÏÑ±: {len(questions)}Í∞ú)")
                        st.warning("‚ö†Ô∏è Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.")
                        return []
                except json.JSONDecodeError as e:
                    st.error(f"‚ùå AI ÏùëÎãµ Ìï¥ÏÑù Ïã§Ìå®: {str(e)}")
                    st.warning("‚ö†Ô∏è AI ÏùëÎãµÏùÑ Ïù¥Ìï¥Ìï† Ïàò ÏóÜÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.")
                    return []
                    
            except openai.AuthenticationError:
                st.error("‚ùå OpenAI API Ïù∏Ï¶ù Ïã§Ìå®!")
                st.warning("üîë API ÌÇ§Í∞Ä Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§. ÏÑ§Ï†ïÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.")
                self.api_available = False
                return []
            
            except openai.RateLimitError:
                st.error("‚ùå API ÏÇ¨Ïö©Îüâ ÌïúÎèÑ Ï¥àÍ≥º!")
                st.warning("‚è∞ Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.")
                return []
            
            except openai.APIConnectionError:
                st.error("‚ùå OpenAI ÏÑúÎ≤Ñ Ïó∞Í≤∞ Ïã§Ìå®!")
                st.warning("üåê Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.")
                return []
            
            except openai.APIError as e:
                st.error(f"‚ùå OpenAI API Ïò§Î•ò: {str(e)}")
                st.warning("‚ö†Ô∏è API ÏÑúÎπÑÏä§Ïóê Î¨∏Ï†úÍ∞Ä ÏûàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.")
                return []
            
            except Exception as e:
                st.error(f"‚ùå ÏòàÏÉÅÏπò Î™ªÌïú Ïò§Î•ò Î∞úÏÉù: {str(e)}")
                st.warning("‚ö†Ô∏è ÏãúÏä§ÌÖú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.")
                return []
    
    def check_answer(self, user_answer: int, correct_answer: int) -> bool:
        """
        ÎãµÏïà Ï≤¥ÌÅ¨
        """
        return user_answer == correct_answer
    
    def calculate_score(self, correct_answers: int, total_questions: int) -> int:
        """
        Ï†êÏàò Í≥ÑÏÇ∞
        """
        from config import POINTS_PER_CORRECT_ANSWER
        return correct_answers * POINTS_PER_CORRECT_ANSWER 